"""
Django settings for thedevstarter_backend project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

import sentry_sdk
from dotenv import find_dotenv, load_dotenv

load_dotenv(find_dotenv(), override=True)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# SENTRY SDK SETUP
sentry_sdk.init(
    dsn=os.getenv("SENTRY_DSN"), traces_sample_rate=0.1, profiles_sample_rate=0.1
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DAJNGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = os.getenv("DJANGO_DEBUG", "True").lower() == "true"
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "payments",
    "authentication",
    "communication",
    "storages",
    "blog",
    "tinymce",
    "chat",
    "affiliate",
    "django_better_admin_arrayfield",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # add whitenoise
    "django.middleware.common.CommonMiddleware",
    "ninja_put_patch_file_upload_middleware.middlewares.process_put_patch",
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:8000",
    "https://backend.thedevstarter.com",
    "https://thedevstarter.com",
]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8000",
    "https://thedevstarter.com",
    "https://backend.thedevstarter.com",
]

CORS_ALLOW_METHODS = (
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
)
CORS_ALLOW_HEADERS = (
    "accept",
    "authorization",
    "content-type",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "*",
)

ROOT_URLCONF = "thedevstarter_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "thedevstarter_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRESS_DB_NAME"),
        "USER": os.getenv("POSTGRESS_USER"),
        "PASSWORD": os.getenv("POSTGRESS_PASSWORD"),
        "HOST": os.getenv("POSTGRESS_HOST"),
        "PORT": "5432",
    }
}


AUTH_USER_MODEL = "authentication.User"

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
]

JWT_AUTH_SECRET = os.getenv("JWT_AUTH_SECRET")
JWT_AUTH_ALGORITHM = os.getenv("JWT_AUTH_ALGORITHM")


GOOGLE_OAUTH2_CLIENT_ID = os.getenv("GOOGLE_OAUTH2_CLIENT_ID")
GOOGLE_OAUTH2_CLIENT_SECRET = os.getenv("GOOGLE_OAUTH2_CLIENT_SECRET")
GOOGLE_REDIRECT_URI = os.getenv("GOOGLE_REDIRECT_URI")
PASSWORD_REDIRECT_URI = os.getenv("PASSWORD_REDIRECT_URI")
DEFAULT_USER_AVATAR = os.getenv("DEFAULT_USER_AVATAR")
EMAIL_VERIFICATION_REDIRECT_URI = os.getenv("EMAIL_VERIFICATION_REDIRECT_URI")
AUTH_TOKEN_EXPIRY_DAYS = int(os.getenv("AUTH_TOKEN_EXPIRY_DAYS"))
VERIFY_EMAIL_ON_SIGNUP = os.getenv("VERIFY_EMAIL_ON_SIGNUP", "True").lower() == "true"
# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


USE_S3 = os.getenv("USE_S3").lower() == "true"
if USE_S3:
    STORAGES = {
        # WhiteNoise
        "staticfiles": {
            "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
        },
        "default": {
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": {
                "region_name": os.getenv("AWS_REGION_NAME"),
                "access_key": os.getenv("AWS_ACCESS_KEY_ID"),
                "secret_key": os.getenv("AWS_SECRET_ACCESS_KEY"),
                "bucket_name": os.getenv("AWS_BUCKET_NAME"),
                "querystring_expire": 60 * 5,  # 5 minutes in seconds
            },
        },
    }

# TODO: add to env variables
MEDIA_URL = "/media/"
MEDIA_ROOT = os.getenv("MEDIA_ROOT")
STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# STRIPE/Payments

STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET_LIVE")
STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY")
STRIPE_PUBLISHABLE_KEY = os.getenv("STRIPE_PUBLISHABLE_KEY")

FRONTEND_SITE_URL = os.getenv("FRONTEND_SITE_URL")
PAYMENT_SUCCESS_URL = os.getenv("PAYMENT_SUCCESS_URL")
PAYMENT_FAILURE_URL = os.getenv("PAYMENT_FAILURE_URL")
COLLECT_PHONE_NUMBERS = True
ALLOW_PROMOTION_CODES = True


# EMAILS
ADMIN_EMAIL = os.getenv("ADMIN_EMAIL")
EMAIL_BACKEND = os.getenv("EMAIL_BACKEND")
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_USE_TLS = True
EMAIL_PORT = 587
# EMAIL_USE_SSL = True
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")

# Newsletter
BEEHIV_API_KEY = os.getenv("BEEHIV_API_KEY")
BEEHIV_PUBLICATION_ID = os.getenv("BEEHIV_PUBLICATION_ID")
# AI essentials


# RECAPTCHA
RECAPTCHA_SECRET_KEY = os.getenv("RECAPTCHA_SECRET_KEY")
COMPANY_NAME = os.getenv("COMPANY_NAME")

# BREVO
BREVO_API_KEY = os.getenv("BREVO_API_KEY")


# BLOG

X_FRAME_OPTIONS = "SAMEORIGIN"

# REFFERAL-SYSTEM
REFERRAL_BONUS = 10


BASE_URL = os.getenv("BASE_URL")

TINYMCE_DEFAULT_CONFIG = {
    "cleanup_on_startup": False,
    "height": 500,
    "trim_span_elements": False,
    "verify_html": False,
    "cleanup": False,
    "custom_undo_redo_levels": 50,
    "encoding": "utf-8",
    "selector": "textarea",
    "theme": "silver",
    "images_upload_url": BASE_URL + "/blog/upload_image/",
    "convert_urls": False,
    "external_plugins": {
        "tiny_mce_wiris": "https://www.wiris.net/demo/plugins/tiny_mce/plugin.js"
    },
    "plugins": """
            textcolor save link file image media preview codesample contextmenu
            table code lists fullscreen  insertdatetime  nonbreaking
            contextmenu directionality searchreplace wordcount visualblocks
            visualchars code fullscreen autolink lists  charmap print  hr
            anchor pagebreak
            """,
    "toolbar1": """
            fullscreen preview bold italic underline | forecolor backcolor | alignleft alignright |
            aligncenter alignjustify | indent outdent | bullist numlist table |
            | link | charmap |  code |
            """,
    "toolbar2": """
             image | tiny_mce_wiris_formulaEditor | tiny_mce_wiris_formulaEditorChemistry |
            """,
    "contextmenu": "formats | link image",
    "menubar": True,
    "statusbar": True,
}

# GITHUB
GITHUB_ACCESS_TOKEN = os.getenv("_GITHUB_ACCESS_TOKEN")
GITHUB_OWNER = os.getenv("_GITHUB_OWNER")

# OPENAI
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

QDRANT_API_KEY = os.getenv("QDRANT_API_KEY")
QDRANT_HOST = os.getenv("QDRANT_HOST")
QDRNAT_COLLECTION_NAME = os.getenv("QDRNAT_COLLECTION_NAME")
